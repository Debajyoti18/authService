/*
1. Security Configuration and JWT Authentication
 JwtAuthFilter.java
 What: This is a custom filter extending OncePerRequestFilter that intercepts every HTTP request.
How it works:It extracts the JWT token from the Authorization header (if present), validates it, and if valid,
 sets the authentication context in Spring Security so the user is recognized as logged in.
Why:Without this filter, Spring Security would not know if a user is authenticated from a JWT token. This filter bridges the gap 
by validating JWTs on every request.
Benefits:
1.Enables stateless authentication via JWT tokens.
2.Allows you to secure endpoints while keeping your API RESTful and scalable.
3.Excludes public endpoints like /signup and /login from JWT checks.

SecurityConfig.java
What:Configures Spring Security for your app.
How: Disables CSRF and CORS for REST APIs.
1.Permits open access to /signup, /login, /refreshToken.Requires authentication for all other endpoints.
2.Uses stateless session management (no HTTP session).
3.Adds your custom JwtAuthFilter before Springâ€™s default username/password filter.
4.Sets up an AuthenticationProvider to use your user service and password encoder.
Why:
Configures security rules and filter chain that controls access and authentication process.
Benefits:
1.Secure your APIs efficiently with JWT.
2.Prevent CSRF issues in REST context.
3.Simplifies authentication logic and session management.
-------------------------------------------------------------------------------------------------- 
  >>>>>>> Stateless Authentication vs. Traditional Session-Based Authentication>>>>>>>>>>

Traditional Session Authentication (What You're NOT Using)
In a traditional web application:

            User logs in with credentials
            Server creates a session and stores user information in server memory
            Server sends back a session ID (usually as a cookie)
            Browser automatically sends this cookie with each request
            Server looks up the session ID to identify the user

This approach:

        Requires server-side storage of sessions
        Relies on cookies for session tracking
        Is challenging for scalability (session replication across servers)
        Is more problematic for mobile/API clients

Stateless JWT Authentication (What Your Config Implements)
With your JWT-based stateless setup:

        User logs in with credentials
        Server validates credentials and generates a JWT token containing user identity/roles
        Server sends the token back to the client
        Client stores the token (localStorage, memory, etc.)
        Client sends token in Authorization header with each request
        Server validates the token's signature and extracts user information

       >>> The key difference is that with SessionCreationPolicy.STATELESS:>>>

            The server doesn't create or maintain any HTTP session objects
            No JSESSIONID cookie is created or used
            Each request must be fully self-contained with its authentication information
            The server doesn't need to store any session state between requests

How It's Configured in Your Code
This behavior is specified with this line in your security configuration:

            java.sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            )

>>>>>>>>>>>>Benefits of Stateless Authentication>>>>>>>>

Scalability: Servers can be added/removed easily without session replication
Performance: No need to look up sessions in a database/cache
Cross-domain compatibility: Works well with APIs consumed by mobile apps or SPAs
Security: Reduces risk of session hijacking attacks
-------------------------------------------------------------------------------------------------------
UserConfig.java
What:    Declares a bean for password encoding using BCrypt
How:    Spring uses this bean to encode (hash) passwords before saving and to verify passwords during login.
Why:Storing plain text passwords is a security risk. BCrypt provides strong, salted password hashing.
Benefits:
Enhanced security for user credentials.
Prevents password theft from database leaks.
----------------------------------------------------------------------------------------------------------
>>>>>>>>>>>  CSRF Protection (Disabled) >>>>>>>
What is CSRF?
Cross-Site Request Forgery is an attack where a malicious site tricks a user's browser into making unwanted requests to a
 site where the user is already authenticated, potentially performing actions without the user's consent.
Why CSRF Protection is Less Relevant for Your API:
No Cookies/Sessions: Traditional CSRF attacks rely on the browser automatically sending cookies. 
Since your API uses stateless JWT authentication (tokens sent in headers, not cookies), this attack vector is significantly reduced.

Different Authentication Mechanism: With JWT tokens:
Tokens must be explicitly included in request headers
Malicious sites can't automatically include these headers in cross-origin requests
The browser's same-origin policy prevents JavaScript from reading/writing custom headers to another domain
Non-Browser Clients: If your API serves mobile apps or other non-browser clients, CSRF protection is even less relevant.
How It's Disabled in Your Code:
            http.csrf().disable()
>>>>>>>>>>>>>>>>>>>>>>>>>>CORS Configuration (Disabled)>>>>>>>>>
What is CORS?
Cross-Origin Resource Sharing is a security feature implemented by browsers that restricts web pages from making
 requests to a different domain than the one that served the original page.
Why CORS is Configured This Way:
By disabling CORS restrictions with .cors().disable(), your API allows requests from any origin. This means:
        Web applications hosted on different domains can freely call your API
        Frontend applications can be developed and deployed separately from your API
        Third-party sites can integrate with your API (if that's desired)

Production Considerations:
As you noted, this open CORS policy might be too permissive for production. Instead, you might want:
java// More secure CORS configuration
@Bean
public CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("https://your-trusted-frontend.com"));
    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
    configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
    configuration.setAllowCredentials(true);
    
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
}
And then:
javahttp.cors(cors -> cors.configurationSource(corsConfigurationSource()))
This would restrict API access to specific trusted origins, methods, and headers, providing better security while
 still allowing necessary cross-origin communication.

*/